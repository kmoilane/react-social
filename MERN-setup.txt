1. Create a folder for the project.
2. Inside the project folder, create a folder for client (react) and folder for server (node).
3. Initialise react app by going to client server in terminal and enter:
    npm init -y
(this will create a package.json file for the project, which will hold dependencies that are used and other information about the project)
4. Install frameworks and dependencies, for example:
    npm i react, react-dom, bootstrap, next
5. If using next.js, change the scripts in package.json to following:
    "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint"
    }
6. Create a pages folder to the client folder and create a file index.js inside it. (This is required by next.js and works as routing)
7. To use bootstrap with next.js, create _app.js file inside pages and add the following:
    import "bootstrap/dist/css/bootstrap.min.css";

    export default function MyApp({ Component, pageProps }) {
        return <Component {...pageProps} />
    }
8. To access images and styles, create public folder and make images folder or similiar inside it
9. To add global stylesheet to the app, just import it to _app.js
10. Inside _app.js to return multiple components, put them between
    <> </> tags. For example:
    <>
        <Nav />
        <Component {...pageProps} />
    </>



SERVER
1. Init server by going to server directory and enter
    npm init -y
2. Install dependencies. For example:
    npm i express mongoose cors morgan esm nodemon dotenv
3. Create server entrypoint for example server.js and add start script to package.json:
    "scripts": {
        "start": "nodemon -r esm server.js"
    },
4. Create .env file and add PORT and DATABASE string in it
5. In server.js import express, mongoose and cors. 
6. For morgan use:
    const morgan = require("morgan");
7. For dotenv use:
    require("dotenv").config();
8. To use express:
    const app = express();
9. For db connection:
    mongoose
        .connect(process.env.DATABASE)
        .then(() => console.log("DB connection established"))
        .catch((err) => console.log("BD error: ", err));
10. To use middlewares use:
    app.use(middleware)
11. With packages we installed use the following middlewares:
    app.use(express.json({ limit: "5mb" }))
    app.use(express.urlencoded({ extended: true }));
    app.use(cors());
12. To handle GET and POST requests use following:
    app.get("/url/path", (req, res) => {
        *Handle request*
    });
    app.post("/url/path", (req, res) => {
        *Handle request*
    });
13. Finally we need to listen to the port, so get it from .env file and if it doesnt exist we can set it to 8000:
    const port = process.env.PORT || 8000;
    app.listen(port, () => console.log(`Server running on port ${port}`));
